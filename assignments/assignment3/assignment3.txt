------------
Assignment 3
------------

This assignment is due Wednesday, April 19th at 23:59:59 latest via email to

christian.wallraven+AMS2017@gmail.com

I am fine with one email per team. In your email you HAVE to specify the names and student IDs of ALL team members. Zip all code and files you need for letting the program run and name the resulting zip-file in the following way:

<STUDENTID1>_<STUDENTID2>_<...>_A3.zip

Files and submissions that DO NOT have this pattern WILL NOT BE GRADED! Take care to use the correct IDs as these are my way of assigning the scores to individuals!

Since almost all of you will be working in teams, I hope that you split the duties equally. Everyone should code a bit and - most importantly - everyone HAS to FULLY understand EVERY line of code AND be able to EXPLAIN THE CODE TO ME!!!


Your task [60 points]:
----------------------
Please write a python script called "hohu.py" that solves the Hodgkin-Huxley
equations for the parameters shown in the ODE.pptx lecture.

So, in the code you need to define the four equations first (similarly to how we did this in class) - you should do this in a function called "ode"

def ode(X,t,...):
	V,m,n,h = X
	# slide 66
	dV_dt = iext(t)-...
	# slides 64,65
	alphan = 
	alpham = 
	alphah = 
	betan = 
	betam = 
	betah = 
	# slide 66
	dm_dt =
	dn_dt = 
	dh_dt = 
	
	return(...)
	
Note that this includes a call to a function iext(t), which you also need to define beforehand. The function iext(t) should support several modes (see below).

The necessary parameters for the ODEs are as follows:
# Maximal conductances as np.array 
# 1=potassium(K),2=sodium(Na), 3=leakage
g=np.array([36,120,0.3])
	
# Battery voltages as np.array
# 1=n-particle, 2=m-particle, 3=h-particle
E=np.array([-12,115,10.613])

# time for integration (in ms)
# note that we start at negative times to allow the membrane to relax 
# its dynamics, before we start plotting at t=0
time=np.linspace(-30,50,8000)

# starting values for V,n,m,h:
s0 = np.array([-10,0,0,0])


Solve the ODE, such that it pays attention to the different modes and the different external current injections.


Notes: 
(1) Mode 3 below requires you to experiment with the ODE a little bit in order to find out the minimum time that a stimulation needs to have in order to elicit two separate spikes. 

(2) For Mode 5, insert a COMMENT into the script that describes the behavior of the membrane for the times before 0!

(3) I would like to know what the maximum firing frequency of this neuron is! Please experiment with the ODE in Mode 4 and insert the result of your analysis as a COMMENT into the script.


Here is the mode description:

Depending on how you call hohu.py [look up how to deal with command line arguments in python!!], the behavior should change as follows:

python3 hohu.py 1
		One stimulation timepoint with several current injections
		stimulation, with each stimulation given from 10 - 12 ms
		
		The current injections should be taken from the following array
		I=np.array([1e-5,1.5,2,2.5,3,4,5,10,15,20,50])
		
python3 hohy.py 2
		two close-by stimulations that do not result in two spikes for I_ext=15
		stimulation given from 10 - 12 ms and 19 - 21 ms
		
		I=np.array([15.0])
python3 hohy.py 3
		two close-by stimulations that do result in two spikes for I_ext=15
		stimulation continuously from 10 - 12 ms and t0 - t0+2 ms
		[FIND OUT THE **CLOSEST** TIMEPOINT t0 THAT GIVES TWO SPIKES THROUGH EXPERIMENTATION - I DO NOT NEED TO SEE THE CODE TO DO THIS, THE VALUE t0 IS ENOUGH IN THE SCRIPT!!]
		
		I=np.array([15.0])
python3 hohy.py 4
		Long stimulation with several current injections
		stimulation continuously from 10 - 40 ms
		[THIS MODE SHOULD ALSO BE USED TO FIND OUT THE MAXIMUM FIRING FREQUENCY!]
		
		The current injections should be taken from the following array
		I=np.array([10,15,20,50])
		
python3 hohy.py 5
		No stimulation, but plot the membrane potential from -30 - 0ms
		[THIS MODE SHOULD BE USED TO DESCRIBE THE BEHAVIOR OF THE NEURON FOR TIMES BEFORE 0!]
		
		I = np.array([0])
		
python3 hohy.py <ANY OTHER VALUE> or <NO VALUE>
		No stimulation
		
		I = np.array([0])
		
		
The plots generated by the code depend on the mode as follows:

(1) If the mode only supplies ONE current injection or NO current injection, then the code should draw TWO plots:

First plot: the solution V(t) plotted from t=0:end INCLUDING the current injection time points clearly marked (shaded region, box, etc.) using plt.ylim([-20,120])

Second plot: the solutions n,m,h plotted from t=0:end INCLUDING the current injection time points clearly marked (shaded region, box, etc.)


(2) If the mode supplies SEVERAL current injections, then the code should only draw one plot for each injection:

Plot: the solution V(t) plotted from t=0:end INCLUDING the current injection time points clearly marked (shaded region, box, etc.) using plt.ylim([-20,120])


(3) If the mode is 5, then the output plot should be:

Plot: the solution V(t) plotted from t=-30:0 (NO SCALING for ylim!!)



